name: test build

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Test with Coverage
        run: npm run test:coverage

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Check Coverage of Modules
        run: |
          COVERAGE_FILE="coverage/coverage-summary.json"
          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "Coverage file not found at $COVERAGE_FILE"
            ls -la coverage/
            exit 1
          fi

          # Extract coverage for all module files
          MODULES_COVERAGE=$(node -e "
            const coverage = require('./$COVERAGE_FILE');
            const moduleFiles = Object.keys(coverage).filter(key => key.includes('/modules/'));
            if (moduleFiles.length === 0) {
              console.log('No module files coverage found');
              process.exit(1);
            }
            
            let totalStats = {
              statements: { total: 0, covered: 0 },
              branches: { total: 0, covered: 0 },
              functions: { total: 0, covered: 0 }
            };
            
            moduleFiles.forEach(file => {
              const stats = coverage[file];
              totalStats.statements.total += stats.statements.total;
              totalStats.statements.covered += stats.statements.covered;
              totalStats.branches.total += stats.branches.total;
              totalStats.branches.covered += stats.branches.covered;
              totalStats.functions.total += stats.functions.total;
              totalStats.functions.covered += stats.functions.covered;
              
              console.log(\`\n${file} Coverage:
              Statements: \${stats.statements.pct}%
              Branches: \${stats.branches.pct}%
              Functions: \${stats.functions.pct}%\`);
            });
            
            const avgStats = {
              statements: (totalStats.statements.covered / totalStats.statements.total * 100).toFixed(2),
              branches: (totalStats.branches.covered / totalStats.branches.total * 100).toFixed(2),
              functions: (totalStats.functions.covered / totalStats.functions.total * 100).toFixed(2)
            };
            
            console.log(\`\nOverall Modules Coverage:
            Statements: \${avgStats.statements}%
            Branches: \${avgStats.branches}%
            Functions: \${avgStats.functions}%\`);
          ")

          echo "$MODULES_COVERAGE"

      - name: Comment PR with Coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageFile = 'coverage/coverage-summary.json';

            try {
              const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
              const moduleFiles = Object.keys(coverage).filter(key => key.includes('/modules/'));
              
              if (moduleFiles.length === 0) {
                throw new Error('No module files coverage found');
              }
              
              let totalStats = {
                statements: { total: 0, covered: 0 },
                branches: { total: 0, covered: 0 },
                functions: { total: 0, covered: 0 },
                lines: { total: 0, covered: 0 }
              };
              
              const moduleStats = moduleFiles.map(file => {
                const stats = coverage[file];
                totalStats.statements.total += stats.statements.total;
                totalStats.statements.covered += stats.statements.covered;
                totalStats.branches.total += stats.branches.total;
                totalStats.branches.covered += stats.branches.covered;
                totalStats.functions.total += stats.functions.total;
                totalStats.functions.covered += stats.functions.covered;
                totalStats.lines.total += stats.lines.total;
                totalStats.lines.covered += stats.lines.covered;
                
                return `### ${file.split('/').pop()}
                | Metric | Coverage |
                |--------|----------|
                | Statements | ${stats.statements.pct}% |
                | Branches | ${stats.branches.pct}% |
                | Functions | ${stats.functions.pct}% |
                | Lines | ${stats.lines.pct}% |
                `;
              });
              
              const avgStats = {
                statements: (totalStats.statements.covered / totalStats.statements.total * 100).toFixed(2),
                branches: (totalStats.branches.covered / totalStats.branches.total * 100).toFixed(2),
                functions: (totalStats.functions.covered / totalStats.functions.total * 100).toFixed(2),
                lines: (totalStats.lines.covered / totalStats.lines.total * 100).toFixed(2)
              };
              
              const comment = `## Coverage Report for Modules

              ### Overall Coverage
              | Metric | Coverage | Threshold |
              |--------|----------|-----------|
              | Statements | ${avgStats.statements}% | 93% |
              | Branches | ${avgStats.branches}% | 65% |
              | Functions | ${avgStats.functions}% | 100% |
              | Lines | ${avgStats.lines}% | 96% |
              
              ${Number(avgStats.statements) < 93 || Number(avgStats.branches) < 65 || Number(avgStats.functions) < 100 || Number(avgStats.lines) < 96 ? '⚠️ Coverage is below threshold!' : '✅ Coverage meets all thresholds!'}

              ### Individual Module Coverage
              ${moduleStats.join('\n\n')}
              `;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            } catch (error) {
              console.error('Error creating coverage comment:', error);
            }
